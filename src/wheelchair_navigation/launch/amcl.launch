<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Arguments -->
  <arg name="scan_topic"     default="scan"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <!-- AMCL -->
  <node pkg="amcl" type="amcl" name="amcl">

    <param name="min_particles"             value="100"/>   <!--minimum allowed numbers of particles-->
    <param name="max_particles"             value="5000"/>  <!--max allowed numbers of particles-->
    <param name="kld_err"                   value="0.01"/>  <!--max error between the true distribution and the estimated distribution-->
    <param name="kld_z"                     value="0.99"/>  <!--Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err.-->
    <param name="update_min_d"              value="0.20"/>  <!--Translational movement required before perform in g a filter update-->
    <param name="update_min_a"              value="0.52"/>  <!--pi/6 Rotational movement required before perform in g a filter update-->
    <param name="resample_interval"         value="2"/>     <!--Number of filter updates required before resampling-->
    <param name="transform_tolerance"       value="0.1"/>   <!--Time with which to post-date the transform that is published, to indicate that this transform is valid into the future-->
    <param name="recovery_alpha_slow"       value="0.00"/>  <!--Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001-->
    <param name="recovery_alpha_fast"       value="0.00"/>  <!--Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1-->
    <param name="initial_pose_x"            value="$(arg initial_pose_x)"/><!--Initial pose mean (x), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_y"            value="$(arg initial_pose_y)"/><!--Initial pose mean (y), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_a"            value="$(arg initial_pose_a)"/><!--Initial pose mean (yaw), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_xx"           value="0.5*0.5"/> <!--Initial pose covariance (x*x), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_yy"           value="0.5*0.5"/> <!--Initial pose mean (y*y), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_aa"           value="0.261799*0.261799"/><!--Initial pose mean (yaw*yaw), used to initialize filter with Gaussian distribution.-->
    <param name="gui_publish_rate"          value="-1.0"/>   <!--Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable.-->
    <param name="save_pose_rate"            value="0.5"/>    <!--Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable-->
    <param name="use_map_topic"             value="false"/>  <!--When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map-->
    <param name="first_map_only"            value="false"/>  <!--When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received-->

    <remap from="scan"                      to="$(arg scan_topic)"/>
    <param name="laser_min_range"           value="-1.0"/>  <!--Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used-->
    <param name="laser_max_range"           value="-1.0"/>  <!--Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used.-->
    <param name="laser_max_beams"           value="30"/>    <!--How many evenly-spaced beams in each scan to be used when updating the filter-->
    <param name="laser_z_hit"               value="0.95"/>  <!--Mixture weight for the z_hit part of the model.-->
    <param name="laser_z_short"             value="0.1"/>   <!--Mixture weight for the z_short part of the model.-->
    <param name="laser_z_max"               value="0.05"/>  <!--Mixture weight for the z_max part of the model.-->
    <param name="laser_z_rand"              value="0.05"/>  <!--Mixture weight for the z_rand part of the model.-->
    <param name="laser_sigma_hit"           value="0.2"/>   <!--Standard deviation for Gaussian model used in z_hit part of the model.-->
    <param name="laser_lambda_short"        value="0.1"/>   <!--Exponential decay parameter for z_short part of model.-->
    <param name="laser_likelihood_max_dist" value="2.0"/>   <!--Maximum distance to do obstacle inflation on map, for use in likelihood_field model-->
    <param name="laser_model_type"          value="likelihood_field"/>

    <param name="odom_model_type"           value="diff"/>
    <param name="odom_alpha1"               value="0.2"/>   <!--Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion-->
    <param name="odom_alpha2"               value="0.2"/>   <!--Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion-->
    <param name="odom_alpha3"               value="0.2"/>   <!--Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion-->
    <param name="odom_alpha4"               value="0.2"/>   <!--Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion-->
    <!--param name="odom_alpha5"               value="0.2"/--> <!--Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion-->
    <param name="odom_frame_id"             value="odom"/>
    <param name="base_frame_id"             value="base_link"/>
    <param name ="global_frame"             value="map"/>
    <param name="tf_broadcaster"            value="true"/>
  </node>
</launch>